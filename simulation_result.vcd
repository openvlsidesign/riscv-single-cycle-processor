$date
	Mon Jul 21 23:01:16 2025
$end
$version
	GTKWave Analyzer v3.4.0 (w)1999-2022 BSI
$end
$timescale
	1 s
$end
$scope module testbench $end
$scope module top $end
$scope module datapath_inst $end
$scope module reg_file $end
$var wire 32 ' readdata1_o[31:0] $end
$var wire 5 - dest_reg_i[4:0] $end
$var wire 1 * reg_file_writeen_i $end
$var wire 5 & rs1[4:0] $end
$var wire 5 ( rs2[4:0] $end
$var wire 32 + wr_data_i[31:0] $end
$var wire 32 ) readdata2_o[31:0] $end
$upscope $end
$upscope $end
$var wire 1 # reset $end
$var wire 1 " clk $end
$scope module datapath_inst $end
$scope module alu_inst $end
$var wire 32 . a_i[31:0] $end
$var wire 32 / b_i[31:0] $end
$upscope $end
$var wire 32 % instr_o[31:0] $end
$var wire 32 $ pc[31:0] $end
$upscope $end
$scope module controller_inst $end
$scope module alu_decoder_inst $end
$var wire 7 2 cond[6:0] $end
$var wire 2 3 alu_op_i[1:0] $end
$upscope $end
$var wire 3 0 alu_ctrl_o[2:0] $end
$var wire 1 , pc_src_o $end
$var wire 7 1 op_i[6:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 3
b0 .
0,
b0 &
b0 '
b0 -
b0 0
1#
b0 (
1"
b0 1
b0 2
b0 +
b0 /
0*
b0 )
b0 %
b0 $
$end
#5
0"
#10
1"
#15
0"
#20
1"
#22
0#
#25
0"
#30
1"
b100 $
#35
0"
#40
1"
b1000 $
b10 -
b10 3
b101 (
b10100000000000100010011 %
b101 +
b10011 1
b1000000 2
b101 /
1*
#45
0"
#50
1"
b1100 $
b11 -
b1100 /
b1100 +
b1100 (
b110000000000000110010011 %
#55
0"
#60
1"
b11111111011100011000001110010011 %
b1100 .
b1100 '
b11 &
b10000 $
b10111 (
b11 +
b111 -
b11111111111111111111111111110111 /
b1000001 2
#65
0"
#70
1"
b1011010 2
b111 &
b11 .
b1000111110001000110011 %
b11 '
b11 0
b101 /
b111 +
b10100 $
b10 (
b100 -
b101 )
b110011 1
#75
0"
#80
1"
b1100 '
b11 &
b1011110 2
b10000011111001010110011 %
b1100 .
b111 )
b100 +
b10 0
b111 /
b101 -
b11000 $
b100 (
#85
0"
#90
1"
b10000101000001010110011 %
b100 '
b1000010 2
b101 &
b11100 $
b1011 +
b100 .
b0 0
#95
0"
#100
1"
b1 0
b100011 2
0*
b1 3
b111 (
b1100011 1
b1011 '
b10011100101000100001100011 %
b1011 .
b100000 $
b11 )
b0 +
b10000 -
b11 /
#105
0"
#110
1"
b111 /
b1100 '
b10 3
b101 0
1*
b1001010 2
b110011 1
b100 (
b100 -
b1100 .
b11 &
b10000011010001000110011 %
b100100 $
b111 )
#115
0"
#120
1"
b0 )
b1100011 1
b1 0
1,
b0 /
b1 3
b0 '
b100010 2
0*
b101000 $
b0 .
b0 (
b1000 -
b100000010001100011 %
b100 &
#125
0"
#130
1"
b111 &
b1001010 2
b101 /
b110011 1
b101 )
0,
b101 0
b11 '
b10 3
b1000111010001000110011 %
b11 .
1*
b110000 $
b100 -
b1 +
b10 (
#135
0"
#140
1"
b101 (
b1 '
b1011 )
b1000010 2
b100 &
b1011 /
b0 0
b1100 +
b1 .
b10100100000001110110011 %
b111 -
b110100 $
#145
0"
#150
1"
b111000 $
b101 /
b1100 '
b10 (
b101 )
b111 &
b10001 +
b1000000001000111000001110110011 %
b1100 .
#155
0"
#160
1"
b10001 )
b1010 2
b111100 $
b1010100 /
b100011 1
b111 (
b100011100011010101000100011 %
b10100 -
b0 3
b0 +
0*
b11 &
#165
0"
#170
1"
b0 &
b11 1
b1000000 $
b0 '
b0 .
b1001 2
b0 )
b1100000 /
1*
b110000000000010000100000011 %
b0 (
b10001 +
b10 -
#175
0"
#180
1"
b1001 -
b1011 )
b10001 .
b110011 1
b10 &
b10001 '
b1000100 $
b1000010 2
b11100 +
b1011 /
b101 (
b10100010000010010110011 %
b10 3
#185
0"
#190
1"
bx 3
b1001000 $
b0 &
b0 )
b11 -
b1101111 1
b0 .
b0 '
1,
b100000000000000111101111 %
bx00010 2
b1000 (
b1001100 +
b0x000 /
#195
0"
#200
1"
b11100 /
b10001 '
b10 -
b1010000 $
b10 3
b11100 )
b10 &
b10001 .
b110011 1
b101101 +
0,
b1001 (
b100100010000000100110011 %
b1000010 2
#205
0"
#210
1"
b1011 2
b1001100 .
b0 3
b1001100 '
b100000 /
b1010100 $
b0 -
b11 &
b101101 )
b10001000011010000000100011 %
b100011 1
0*
b10 (
b0 +
